
#include "convert"
#include <cstdint>
#include <span>
#include <string>
#include <string_view>
#include <array>
#include <concepts>
    // #include <iostream>
    // #include <iomanip>

namespace eio
{
    class formatter
    {
        public:
        formatter(){}
        formatter(std::span<uint8_t const> obj, std::string_view fmt):_object(obj), _format(fmt){}
        virtual ~formatter(){};
        virtual bool emit(std::string& targ)
        {
            targ = "";
            return false;
        }
        protected:
        std::span<uint8_t const> _object{};
        std::string_view _format{""};
    };
    template<std::integral T>
    class int_formatter : public formatter
    {
        public:
        virtual ~int_formatter(){};
        int_formatter(T const& param, std::string_view fmt = "")
        : formatter(std::span<uint8_t const>(reinterpret_cast<uint8_t const*>(&param),1), fmt)
        {}
        bool emit(std::string& targ) override
        {
            std::array<char, 64> buf;
            T const* tmp{reinterpret_cast<T const*>(_object.data())};
            [[maybe_unused]]auto characters{itoa<SignHandling::NothingAndMinus>(*tmp, std::span<char>(buf))};
            targ = buf.data();
            return true;
        }
    };
    template<std::floating_point T>
    class float_formatter : public formatter
    {
        public:
        virtual ~float_formatter(){};
        float_formatter(T const& param, std::string_view fmt = "")
        : formatter(std::span<uint8_t const>(reinterpret_cast<uint8_t const*>(&param),1), fmt)
        {}
        bool emit(std::string& targ) override
        {
            std::array<char, 64> buf_int;
            std::array<char, 64> buf_frac;
            T tmp{*reinterpret_cast<T const*>(_object.data())};
            // std::cerr << "emit: " << std::setprecision(12) << tmp << std::endl;
            int int_part{static_cast<int>(tmp)};
            T Remainder{tmp - int_part};
            unsigned float_part{static_cast<unsigned>(Remainder * 1000000)};
            itoa<SignHandling::NothingAndMinus>(int_part, std::span<char>(buf_int), 10);
            itoa<SignHandling::MagnitudeOnly>(float_part, std::span<char>(buf_frac), 10);
            std::string_view fracString{buf_frac.data()};
            targ = std::string(buf_int.data()) + '.';
            for (int i = fracString.size(); i < 6; ++i)
            {
                targ = targ + '0';
            }
            targ = targ + fracString.data();
            return true;
        }
    };
    class generic_formatter : public formatter
    {
        public:
        virtual ~generic_formatter(){}
        generic_formatter(std::span<uint8_t> data, std::string_view fmt = "")
        : formatter(data, fmt)
        {}
        bool emit(std::string& targ) override
        {
            constexpr std::array cNibblesLower{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
            targ = "[hex: ";
            for ( auto val : _object)
            {
                auto upper{(val >> 4) & 0x0f};
                auto lower{val & 0x0f};
                targ.push_back(cNibblesLower[upper]);
                targ.push_back(cNibblesLower[lower]);
                targ.push_back(' ');
            }
            targ += "(" + std::to_string(_object.size()) + " bytes)]";
            return true;
        }
        protected:
    };
}//eio
