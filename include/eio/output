#pragma once
#include "formatters"
#include "emitters"
#include <vector>
// #include <iostream>

namespace eio
{
    class output
    {
        enum class fmtStrState{
            normal,
            formatSpecifier,
        };
    public:
        output(emitter &outMech) : _emitter(outMech) {}
        virtual ~output() { purge(); }
        virtual void print(std::string_view format)
        {
            // int nextParam{0};
            // for (auto iter{format.begin()}; iter != format.end(); ++iter)
            // {
            //     if (*iter == '{')
            //     {
            //         if (*(iter + 1) == '{')
            //         {
            //             //escaped {, emit it.

            //         }
            //     }
            // }
            cspan chunk(reinterpret_cast<character const *>(format.data()), format.size());
            cspan formatSpec;
            size_t soffset{0};
            ssize_t eoffset{0};
            size_t eend{0};
            [[maybe_unused]] fmtStrState state{fmtStrState::normal};
            [[maybe_unused]] size_t paramIdx{0};
            for(auto iter{format.begin()} ; iter != format.end(); ++iter)
            {
                eoffset = (iter - format.begin()) + 1;
                eend = eoffset - soffset;
                // std::cerr << "ls eoffset: " << eoffset << " eend: " << eend << "\n";
                if (*iter == '{')
                {
                    if (*(iter + 1) == '{')
                    {
        // std::cerr << "{{soffset: " << soffset << " eend: " << eend << "\n";
                        _emitter.emit_span(chunk.subspan(soffset, eend));
                        ++iter;
                    }
                    else
                    {
                        //start a format substring
                // std::cerr << "paramspec startsoffset: " << soffset << " eend: " << eend << "\n";
                        _emitter.emit_span(chunk.subspan(soffset, eend - 1));
                        // _emitter.emit('#');
                        // soffset = eoffset;
                        state = fmtStrState::formatSpecifier;
                    }
                    soffset = (iter + 1) - format.begin();
                }
                else if (*iter == '}')
                {
                    if (*(iter + 1)  == '}')
                    {
                // std::cerr << "}}soffset: " << soffset << " eend: " << eend << "\n";
                        _emitter.emit_span(chunk.subspan(soffset, eend));
                        ++iter;
                        soffset = (iter + 1) - format.begin();
                    }
                    else if (state == fmtStrState::formatSpecifier)
                    {
                        // std::cerr << "param spec soffset: " << soffset << " eend: " << eend << "\n";
                        formatSpec = chunk.subspan(soffset, eend - 1);
                        soffset = eoffset;

                        // _emitter.emit('|');
                        // _emitter.emit(formatSpec);
                        // _emitter.emit('|');
                        if (paramIdx < _params.size())
                        {
                            _params[paramIdx]->emit(_emitter);
                            ++paramIdx;
                        }

                    }
                }
            }
            if (soffset != format.size())
            {
                // std::cerr << "soffset: " << soffset << " eend: " << eend << "\n";
                _emitter.emit_span(chunk.subspan(soffset, eend));
            }
            // _emitter.emit(std::span<char const>(format.data(), format.size()));
            purge();
        }
        // virtual output& param(formatter<T> const& formattable);
        template <typename P>
        output &ref(P const &arg)
        {
            // if constexpr (is_formatter<P>)
            // {
            //     _params.push_back(&arg);
            // }
            if constexpr (std::integral<P>)
            {
                formatter *tmp{nullptr};
                tmp = new int_formatter(arg);
                _params.push_back(tmp);
            }
            else if constexpr (std::floating_point<P>)
            {
                formatter *tmp{nullptr};
                tmp = new float_formatter(arg);
                _params.push_back(tmp);
            }
            else if constexpr(std::is_same<P, std::string_view>())
            {
                formatter *tmp{nullptr};
                tmp = new stringview_formatter(arg);
                _params.push_back(tmp);
            }
            else
            {
                formatter *tmp{nullptr};
                tmp = new generic_formatter(std::span<uint8_t const>(reinterpret_cast<uint8_t const*>(&arg), sizeof(arg)));
                _params.push_back(tmp);
            }
            return *this;
        }
        template <typename P>
        output &val(P arg)
        {
            // if constexpr (is_formatter<P>)
            // {
            //     _params.push_back(&arg);
            // }
            if constexpr (std::integral<P>)
            {
                formatter *tmp{nullptr};
                tmp = new int_formatter(arg);
                _params.push_back(tmp);
            }
            else if constexpr (std::floating_point<P>)
            {
                formatter *tmp{nullptr};
                tmp = new float_formatter(arg);
                _params.push_back(tmp);
            }
            else if constexpr(std::is_same<P, std::string_view>())
            {
                formatter *tmp{nullptr};
                tmp = new stringview_formatter(arg);
                _params.push_back(tmp);
            }
            else
            {
                formatter *tmp{nullptr};
                tmp = new generic_formatter(arg);
                _params.push_back(tmp);
            }
            return *this;
        }

    protected:
        void purge()
        {
            for (auto *ptr : _params)
            {
                delete ptr;
            }
            _params.clear();
        }
        emitter &_emitter;
        std::array<formatter, 10> _formatters{};
        std::vector<formatter *> _params{};
    };
    
}