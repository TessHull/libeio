#pragma once
#include "types"
#include <string_view>
#include <span>

namespace eio
{
    class emitter
    {
        public:
        virtual ~emitter(){};
        virtual bool emit(character arg) = 0;
        virtual bool emit(string_view arg) = 0;
        virtual bool emit(std::string_view arg)
        {
            return this->emit(string_view(reinterpret_cast<character const*>(arg.data()), arg.size()));
        }
        virtual bool emit(character const * arg)
        {
            return this->emit(string_view(arg));
        }
        virtual bool emit(char const * arg)
        {
            return this->emit(string_view(reinterpret_cast<character const*>(arg)));
        }
        virtual bool emit(character * arg)
        {
            return this->emit(string_view(arg));
        }
        virtual bool emit(char * arg)
        {
            return this->emit(string_view(reinterpret_cast<character const*>(arg)));
        }
        virtual bool emit_span(cspan arg) = 0;
    };
    class span_emitter : public emitter
    {
        public:
        span_emitter(span spn):_span(spn){}
        bool emit(character arg) override
        {
            if (_used < _span.size())
            {
                _span[_used] = arg;
                ++_used;
                return true;
            }
            return false;
        }
        bool emit(string_view arg) override
        {
            if (_used + arg.size() < _span.size())
            {
                for(auto val: arg)
                {
                    if (val == '\0')
                    {
                        break;
                    }
                    _span[_used] = val;
                    ++_used;
                }
                return true;
            }
            return false;
        }
        bool emit_span(cspan arg) override
        {
            if (_used + arg.size() < _span.size())
            {
                for(auto val: arg)
                {
                    if (val == '\0')
                    {
                        break;
                    }
                    _span[_used] = val;
                    ++_used;
                }
                return true;
            }
            return false;
        }
        span::size_type size()const{return _used;}
        span span()const{return _span.subspan(0, _used);}
        character* data()const{return _span.data();}
        span::size_type capacity()const{return _span.size();}
        private:
        eio::span _span;
        span::size_type _used{0};
    };
}//namespace eio