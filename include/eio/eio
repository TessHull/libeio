#include "formatters"
#include <vector>
#include <iostream>

namespace eio
{
    class output
    {
        public:
        virtual ~output(){}
        virtual void print(std::string_view format) = 0;
        // virtual output& param(formatter<T> const& formattable);
        template<typename P>
        output& ref(P const& arg)
        {
            // if constexpr (is_formatter<P>)
            // {
            //     _params.push_back(&arg);
            // }
            if constexpr(std::integral<P>)
            {
                formatter* tmp{nullptr};
                tmp = new int_formatter(arg);
                _params.push_back(tmp);
            }
            else if constexpr(std::floating_point<P>)
            {
                formatter* tmp{nullptr};
                tmp = new float_formatter(arg);
                _params.push_back(tmp);
            }
            else
            {
                formatter* tmp{nullptr};
                tmp = new generic_formatter(arg);
                _params.push_back(tmp);
            }
            return *this;
        }
        template<typename P>
        output& val(P arg)
        {
            // if constexpr (is_formatter<P>)
            // {
            //     _params.push_back(&arg);
            // }
            if constexpr(std::integral<P>)
            {
                formatter* tmp{nullptr};
                tmp = new int_formatter(arg);
                _params.push_back(tmp);
            }
            else if constexpr(std::floating_point<P>)
            {
                formatter* tmp{nullptr};
                tmp = new float_formatter(arg);
                _params.push_back(tmp);
            }
            else
            {
                formatter* tmp{nullptr};
                tmp = new generic_formatter(arg);
                _params.push_back(tmp);
            }
            return *this;
        }
        protected:
        void purge()
        {
            for (auto *ptr: _params)
            {
                delete ptr;
            }
            _params.clear();
        }
        std::array<formatter, 10> _formatters{};
        std::vector<formatter*> _params{};
    };
    class FileOutput : public output
    {
        public:
        FileOutput(void* File);
        FileOutput(std::string_view FilePath);
        virtual ~FileOutput();
        void print(std::string_view format) override;
        private:
        void* _file{nullptr};
        bool _managePointer{false};
    };
    extern FileOutput out;
}